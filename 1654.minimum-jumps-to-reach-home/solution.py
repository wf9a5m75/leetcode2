from typing import List
class Solution:
    def minimumJumps(self, forbidden: List[int], a: int, b: int, x: int) -> int:
        if x in forbidden:
            return -1

        # Since the problem says:
        #  1 <= a, b, forbidden[i] <= 2000
        #  0 <= x <= 2000,
        # so I guess the maximum n could be 6000.
        #
        # After reading this thread, (https://leetcode.com/problems/minimum-jumps-to-reach-home/discuss/978357/C%2B%2B-bidirectional-BFS-solution-with-proof-for-search-upper-bound)
        # I learned (a + b + x = 2000)
        n =  max(x, max(forbidden)) + a + b

        # previous positions
        prevF = set([0])
        prevB = set()

        # Treats the forbidden as the checked positions
        seen = [True] * n
        for i in forbidden:
            seen[i] = False

        cnt = 0
        while(prevF or prevB):
            nextF = set()
            nextB = set()

            # The positions use `+a` in the previous step
            for pos in prevF:

                # If the position has been checked, skip there.
                if seen[pos] == False:
                    continue

                # Reached to the goal
                if pos == x:
                    return cnt

                # Marks as visited
                seen[pos] = False

                # Calculates the next positions
                pos2 = pos + a
                if (pos2 < n) and (seen[pos2]):
                    nextF.add(pos2)
                pos2 = pos - b
                if (pos2 > 0) and (seen[pos2]):
                    nextB.add(pos2)

            # The positions use `-b` in the previous step
            for pos in prevB:
                # If the position has been checked, skip there.
                if seen[pos] == False:
                    continue

                # Reached to the goal
                if pos == x:
                    return cnt

                # Marks as visited
                seen[pos] = False

                # Since we can't use `-b` twice in a row,
                # so we have to move forward
                pos2 = pos + a
                if (pos2 < n) and (seen[pos2]):
                    nextF.add(pos2)

            cnt += 1
            prevF = nextF
            prevB = nextB
        return -1

print("ans = ", Solution().minimumJumps([1694,1345,1741,1143,456,579,871,1079,1022,976,1957,799,36,885,962,1467,791,336,461,101,1717,1249,1671,1846,1460,1390,1289,384,114,704,1682,967,1162,1830,16,364,1475,1036,477,1696,1609,1931,972,405,318,407,492,487,1120,1818,937,1323,677,1094,761,903,281,1770,1858,1789,826,1556,302,1627,713,270,1103,323,701,567,1400,1201,122,94,17,1879,1205,1788,150,916,1448,1359,1689,115,851,1839,41,283,2000,43,1948,1166,755,1577,1522,1819,424,273,368,1309,436,600,1786,1496,1488,1213,1506,1943,1275,589,1353,1078,730,1624,1732,1977,731,1082,110,894,49,1794,1549,169,1578,1961,1557,657,1415,801,1015,252,573,952,32,34,1628,292,1130,1548,1417,1633,1089,1593,1746,918,107,119,991,1973,775,1032,681,1512,1212,391,1145,1040,697,1413,1638,1978,1257,1131,1904,779,1892,1438,1318,1524,1955,897,1061,1645,1341,444,1350,563,223,149,26,1687,1812,812,1340,1790,1662,944,185,834,1215,988,462,1605,228,655,771,1674,1497,388,1887,1780,616,1361,127,1328,1057,638,1454,186,324,1385,1480,786,949,725,1698,1441,248,1109,1024,929,680,360,476,1373,570,380,1281,216,1832,1167,1202,1424,356,1335,233,355,1727,1038,145,174,1710,37,387,231,1649,432,1069,1503,1392,640,1749,1520,439,1903,287,1087,877,699,1545,1960,540,990,1197,214,1331,890,366,305,1928,984,1368,466,109,1138,585,1321,1062,1312,87,1576,1631,759,193,1232,632,847,134,1329,57,557,230,1591,1896,448,572,1298,1262,269,848,1859,955,111,1459,1544,116,1108,207,1256,652,1035,1114,1462,665,1964,1918,1798,728,342,612,531,1588,879,807,1253,756,1895,385,1566,1146,1316,112,304,1515,1466,308,1234,569,1358,1561,488,1311,490,1391,139,1098,1471,1783,1010,1399,175,1709,772,1442,1482,1422,265,1125,1529,106,581,1550,1969,872,1619,634,1606,39,1841,170,618,310,498,1568,1364,905,1808,1388,191,591,1747,1844,1465,1700,628,1272,698,1625,1530,1278,1996,1219,1124,814,891,1519,1575,225,95,156,1182,931,224,932,882,1565,1885,1063,1782,793,1169,636,1293,1962,773,625,24,1778,1838,1888,1074,1072,162,491,1947,256,1242,1878,1564,904,1653,1163,393,469,658,1660,1857,142,1848,1740,822,35,690,1332,313,197,338,543,1238,1265,1320,85,1376,1563,1963,1635,922,710,1884,1942,1534,577,71,1356,1920,1191,412,1366,538,1363,319,837,291,888,947,1714,743,130,1999,1056,1204,1874,429,1585,241,483,203,451,1168,452,647,322,828,237,1767,1180,682,178,1620,1444,1688,1070,1118,1853,1716,999,1244,1271,1080,495,1330,502,1498,1260,1470,1870,648,147,923,1764,311,645,1037,1285,1894,400,246,1485,985,1914,339,741,995,1306,736,878,1845,780,247,510,331,516,321,1099,1792,980,1616,1537,158,1128,1418,692,925,917,1386,946,402,641,1440,1935,1393,1112,1326,45,137,254,1170,700,417,464,630,1478,592,718,712,745,975,1926,131,671,1850,1179,1076,1003,1726,1155,1307,332,468,1283,236,188,935,209,603,593,1815,1750,1951,1152,590,1461,1866,747,438,1401,361,518,1800,266,1979,1744,399,1723,561,1012,494,1229,1411,546,38,1925,1502,290,1940,1067,1301,696,954,887,320,763,343,505,1235,1149,1449,1290,1912,951,70,1476,213,930,608,277,1423,250,218,1938,1761,423,752,97,1890,1133,1147,1666,1408,154,1805,566,1172,1261,644,416,1525,1020,372,58,500,1239,1154,1136,442,797,993,1833,54,754,433,206,574,717,1245,474,729,960,1922,1663,605,1796,1889,1434,1739,559,727,138,103,301,378,1869,933,564,1324,1026,1641,509,1504,852,1831,485,1189,1058,523,312,583,1742,1474,263,309,1994,908,1007,157,611,524,1801,1574,1451,1210,28,1230,1049,859,1521,73,89,666,753,183,1479,1177,1139,409,1086,831,1837,1492,1409,1500,352,941,1959,829,1005,1527,766,835,565,1267,1738,1236,1233,470,1569,117,795,981,906,513,1064,1618,525,239,392,1865,541,1104,173,1254,1701,66,784,1785,676,271,232,68,1809,1754,825,1993,459,431,286,1294,1248,1160,192,1803,738,1494,350,454,1042,1551,530,1088,1854,1898,714,1840,1901,1334,836,53,168,1526,1439,403,148,1208,47,42,205,1861,221,1573,554,446,901,398,511,1346,1612,896,598,1140,1536,1195,78,844,430,1315,1250,744,1122,529,1781,750,445,948,280,1642,365,1050,1995,1881,626,297,64,970,1383,1611,1259,1279,1650,1403,1793,91,1630,1906,1559,1513,1487,164,1673,1137,740,83,229,571,838,1734,1540,1762,902,425,1134,716,1001,251,1567,914,1000,397,785,1394,1053,943,1052,535,694,1396,411,458,161,1009,51,1483,742,484,973,478,1683,823,1284,1617,899,1173,1206,1066,661,1893,1965,1774,568,649,1595,434], 1, 14, 3) == 3)
